sage: p.solve()
2.0109170518746775
sage: p.get_values(x)
{0: 0.0,
 1: 0.5870570107858241,
 2: 0.4129429892141754,
 3: 0.0341448382126348,
 4: 0.010100154083204924,
 5: 0.01992604006163327,
 6: 0.012174114021571621,
 7: -3.281357663933328e-18,
 8: 0.03550231124807394,
 9: 0.041577812018489965,
 10: 0.0332141756548536,
 11: 0.035044684129429855,
 12: 0.02321417565485358,
 13: 0.027446841294298883,
 14: 0.007745762711864403,
 15: 0.05481047765793526,
 16: 0.021428351309707227,
 17: 0.025169491525423717,
 18: 0.07067180277349765,
 19: 0.06870261941448377,
 20: 0.00469183359013867,
 21: 0.031044684129429866,
 22: 0.05616949152542369,
 23: 0.010946070878274266,
 24: 0.017993836671802738,
 25: 0.04242835130970722,
 26: 0.002600924499229553}
sage: b = p.get_backend()
sage: exact_optsol(b)
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
sage: exact_optsol2(b)
(0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0)

SUCCESS

sage: load_attach_path("/mnt/c/users/phili/SPAM_Applications")
sage: load("startup.sage")
sage: p = MixedIntegerLinearProgram(maximization=True, solver="GLPK")
sage: x = p.new_variable(nonnegative=True)
sage: p.add_constraint(-x[0] + x[1] <= 2)
sage: p.add_constraint(8 * x[0] + 2 * x[1] <= 17)
sage: p.set_objective(5.5 * x[0] - 3 * x[1])
sage: p.solve()
11.6875
sage: p.get_values(x)
{0: 2.125, 1: 0.0}
sage: b = p.get_backend()
sage: b.solver_parameter("simplex_or_intopt", "simplex_only")
sage: b.solve()
0
sage: exact_optsol2(b)
(17/8, 0)
sage: exact_optsol(b)
(17/8, 0)
sage: K.<mu>=ParametricRealField([2])
INFO: 2020-12-01 09:21:41,527 Initialized ParametricRealField(names = ['mu'], values = [2])
sage: p = MixedIntegerLinearProgram(solver="GLPK",maximization=True, base_ring=K)
sage: x = p.new_variable(integer=False, nonnegative=True)
sage: col1 = [1,1003/1000,1005/1000,1007/1000,1002/1000,1001/1000,1005/1000,1004/100
....: 0,1004/1000,1008/1000,1007/1000,1002/1000,1002/1000,1002/1000,1002/1000,1,1002
....: /1000,1004/1000,1004/1000,999/1000,997/1000,1007/1000,996/1000,1002/1000]
sage: col2 = [1044/1000,1015/1000,1024/1000,1027/1000,1040/1000,995/1000,1044/1000,1
....: 060/1000,1,1030/1000,963/1000,1005/1000,960/1000,1035/1000,1047/1000,978/1000,
....: 1048/1000,1029/1000,1076/1000,1002/1000,1008/1000,958/1000,1056/1000,980/1000]
....:
sage:  col3 = [1068/1000,1051/1000,1062/1000,980/1000,991/1000,969/1000,1086/1000,10
....: 43/1000,963/1000,949/1000,1034/1000,1022/1000,972/1000,1050/1000,1042/1000,908
....: /1000,1146/1000,1018/1000,1015/1000,909/1000,1063/1000,1064/1000,1071/1000,107
....: 0/1000]
sage: r1sum=0
sage: r2sum=0
sage: r3sum=0
sage:     for i in range(len(col1)):
....:             r1sum += col1[i]
....:
sage:     for j in range(len(col2)):
....:             r2sum += col2[j]
....:
sage:     for k in range(len(col3)):
....:             r3sum += col3[k]
....:
sage: r1 = r1sum/24
sage: r2 = r2sum/24
sage: r3 = r3sum/24
sage: p.add_constraint(x[0]>=0)
sage: p.add_constraint(x[1]>=0)
sage: p.add_constraint(x[2]>=0)
sage:  p.add_constraint(x[0]+x[1]+x[2] == 1)
sage:  for t in range(3,27):
....:             p.add_constraint(-x[t] <= x[0]*(col1[t-3]-r1) + x[1]*(col2[t-3]-r2
....: ) + x[2]*(col3[t-3]-r3))
....:
sage:     for tt in range(3,27):
....:             p.add_constraint(x[tt] >= x[0]*(col1[tt-3]-r1) + x[1]*(col2[tt-3]-
....: r2) + x[2]*(col3[tt-3]-r3))
....:
sage: for ttt in range(3,27):
....:             p.add_constraint(x[ttt]>=0)
....:
sage:  p.set_objective(mu * (x[0]*r1 + x[1]*r2 + x[2]*r3) - ((1/24) * sum([x[o] for
....: o in range(3,27)])))
sage: p.solve()
2.0109170518746775
sage: b = p.get_backend()
sage: p.get_values(x)
{0: 0.0,
 1: 0.5870570107858241,
 2: 0.4129429892141754,
 3: 0.0341448382126348,
 4: 0.010100154083204924,
 5: 0.01992604006163327,
 6: 0.012174114021571621,
 7: -3.281357663933328e-18,
 8: 0.03550231124807394,
 9: 0.041577812018489965,
 10: 0.0332141756548536,
 11: 0.035044684129429855,
 12: 0.02321417565485358,
 13: 0.027446841294298883,
 14: 0.007745762711864403,
 15: 0.05481047765793526,
 16: 0.021428351309707227,
 17: 0.025169491525423717,
 18: 0.07067180277349765,
 19: 0.06870261941448377,
 20: 0.00469183359013867,
 21: 0.031044684129429866,
 22: 0.05616949152542369,
 23: 0.010946070878274266,
 24: 0.017993836671802738,
 25: 0.04242835130970722,
 26: 0.002600924499229553}
sage: b.solver_parameter("simplex_or_intopt", "simplex_only")
sage: b.solve()
0
sage: exact_optsol(b)
(0, 381/649, 268/649, 554/16225, 1311/129800, 3233/162250, 7901/649000, 0, 23041/649000, 3373/81125, 5389/162250, 2843/81125, 7533/324500, 17813/649000, 457/59000, 8893/162250, 13907/649000, 297/11800, 22933/324500, 11147/162250, 609/129800, 5037/162250, 1657/29500, 888/81125, 5839/324500, 3442/81125, 211/81125)
sage: exact_optsol2(b)
(0,
 381/649,
 268/649,
 554/16225,
 1311/129800,
 3233/162250,
 7901/649000,
 0,
 23041/649000,
 3373/81125,
 5389/162250,
 2843/81125,
 7533/324500,
 17813/649000,
 457/59000,
 8893/162250,
 13907/649000,
 297/11800,
 22933/324500,
 11147/162250,
 609/129800,
 5037/162250,
 1657/29500,
 888/81125,
 5839/324500,
 3442/81125,
 211/81125)